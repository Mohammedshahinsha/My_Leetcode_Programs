import java.util.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

// Main SuperStore Application Class - Entry Point
public class SuperStore {
    public static void main(String[] args) {
        // Create application instance and start
        SuperStoreApplication app = new SuperStoreApplication();
        app.start();
    }
}

// Main Application Controller Class
class SuperStoreApplication {
    // Services - Dynamic instances
    private ProfileService profileService;
    private InventoryService inventoryService;
    private OrderService orderService;
    private PaymentService paymentService;
    
    // Application state
    private Scanner scanner;
    private User currentUser;
    private boolean running;
    
    // Constructor - Initialize all services and components
    public SuperStoreApplication() {
        this.profileService = new ProfileService();
        this.inventoryService = new InventoryService();
        this.orderService = new OrderService();
        this.paymentService = new PaymentService();
        this.scanner = new Scanner(System.in);
        this.currentUser = null;
        this.running = true;
        
        // Initialize sample data for testing
        initializeSampleData();
    }
    
    // Start the application
    public void start() {
        System.out.println("=== Welcome to Super Store ===");
        
        // Main application loop
        while (running) {
            if (currentUser == null) {
                showLoginMenu();
            } else {
                if (currentUser.getUserType() == UserType.BUYER) {
                    showBuyerMenu();
                } else {
                    showSellerMenu();
                }
            }
        }
        
        // Cleanup
        scanner.close();
        System.out.println("Thank you for using Super Store!");
    }
    
    // Initialize sample data for testing
    private void initializeSampleData() {
        // Create sample seller
        User seller = new User("seller1", hashPassword("seller123"), UserType.SELLER);
        profileService.addUser(seller);
        
        // Create sample buyer
        User buyer = new User("buyer1", hashPassword("buyer123"), UserType.BUYER);
        profileService.addUser(buyer);
        
        // Add sample products
        Product laptop = new Product("P001", "Gaming Laptop", 50000.0, 10, "seller1");
        Product phone = new Product("P002", "Smartphone", 25000.0, 20, "seller1");
        inventoryService.addProduct(laptop);
        inventoryService.addProduct(phone);
        
        System.out.println("Sample data loaded:");
        System.out.println("Seller - Username: seller1, Password: seller123");
        System.out.println("Buyer - Username: buyer1, Password: buyer123");
        System.out.println();
    }
    
    // Display login/registration menu
    private void showLoginMenu() {
        System.out.println("\n--- Login Menu ---");
        System.out.println("1. Login");
        System.out.println("2. Register");
        System.out.println("3. Exit");
        System.out.print("Choose option: ");
        
        int choice = getIntInput();
        switch (choice) {
            case 1:
                handleLogin();
                break;
            case 2:
                handleRegister();
                break;
            case 3:
                running = false;
                break;
            default:
                System.out.println("Invalid option!");
        }
    }
    
    // Handle user login
    private void handleLogin() {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        
        // Authenticate user through profile service
        User user = profileService.authenticateUser(username, hashPassword(password));
        if (user != null) {
            currentUser = user;
            System.out.println("Login successful! Welcome " + username);
        } else {
            System.out.println("Invalid credentials!");
        }
    }
    
    // Handle user registration
    private void handleRegister() {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        
        // Check if username already exists through profile service
        if (profileService.userExists(username)) {
            System.out.println("Username already exists!");
            return;
        }
        
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        
        // Password validation
        if (!isValidPassword(password)) {
            System.out.println("Password must be at least 6 characters long!");
            return;
        }
        
        System.out.println("Select user type:");
        System.out.println("1. Buyer");
        System.out.println("2. Seller");
        System.out.print("Choose: ");
        
        int typeChoice = getIntInput();
        UserType userType = (typeChoice == 2) ? UserType.SELLER : UserType.BUYER;
        
        // Create new user and register through profile service
        User newUser = new User(username, hashPassword(password), userType);
        profileService.addUser(newUser);
        
        System.out.println("Registration successful!");
    }
    
    // Show buyer menu options
    private void showBuyerMenu() {
        System.out.println("\n--- Buyer Menu ---");
        System.out.println("1. View Products");
        System.out.println("2. Add to Cart");
        System.out.println("3. View Cart");
        System.out.println("4. Place Order");
        System.out.println("5. View My Orders");
        System.out.println("6. Logout");
        System.out.print("Choose option: ");
        
        int choice = getIntInput();
        switch (choice) {
            case 1:
                handleListInventory();
                break;
            case 2:
                handleAddToCart();
                break;
            case 3:
                handleViewCart();
                break;
            case 4:
                handlePlaceOrder();
                break;
            case 5:
                handleViewMyOrders();
                break;
            case 6:
                handleLogout();
                break;
            default:
                System.out.println("Invalid option!");
        }
    }
    
    // Show seller menu options
    private void showSellerMenu() {
        System.out.println("\n--- Seller Menu ---");
        System.out.println("1. View My Products");
        System.out.println("2. Add Product");
        System.out.println("3. Update Product");
        System.out.println("4. View All Orders");
        System.out.println("5. Logout");
        System.out.print("Choose option: ");
        
        int choice = getIntInput();
        switch (choice) {
            case 1:
                handleViewMyProducts();
                break;
            case 2:
                handleAddItem();
                break;
            case 3:
                handleUpdateItem();
                break;
            case 4:
                handleViewAllOrders();
                break;
            case 5:
                handleLogout();
                break;
            default:
                System.out.println("Invalid option!");
        }
    }
    
    // INVENTORY SERVICE OPERATIONS - Dynamic Methods
    
    // Add new product to inventory
    private void handleAddItem() {
        System.out.print("Enter product ID: ");
        String productId = scanner.nextLine();
        
        // Check if product ID already exists through inventory service
        if (inventoryService.productExists(productId)) {
            System.out.println("Product ID already exists!");
            return;
        }
        
        System.out.print("Enter product name: ");
        String name = scanner.nextLine();
        System.out.print("Enter price: ");
        double price = getDoubleInput();
        System.out.print("Enter quantity: ");
        int quantity = getIntInput();
        
        // Create and add new product through inventory service
        Product product = new Product(productId, name, price, quantity, currentUser.getUsername());
        inventoryService.addProduct(product);
        
        System.out.println("Product added successfully!");
    }
    
    // Update existing product
    private void handleUpdateItem() {
        handleViewMyProducts();
        System.out.print("Enter product ID to update: ");
        String productId = scanner.nextLine();
        
        Product product = inventoryService.getProduct(productId);
        if (product == null || !product.getSellerId().equals(currentUser.getUsername())) {
            System.out.println("Product not found or not owned by you!");
            return;
        }
        
        System.out.println("Current details: " + product);
        System.out.print("Enter new name (or press Enter to keep current): ");
        String name = scanner.nextLine();
        System.out.print("Enter new price (or 0 to keep current): ");
        double price = getDoubleInput();
        System.out.print("Enter new quantity (or -1 to keep current): ");
        int quantity = getIntInput();
        
        // Update product through inventory service
        inventoryService.updateProduct(productId, name, price, quantity);
        
        System.out.println("Product updated successfully!");
    }
    
    // List all available products
    private void handleListInventory() {
        System.out.println("\n--- Available Products ---");
        List<Product> products = inventoryService.getAllAvailableProducts();
        
        if (products.isEmpty()) {
            System.out.println("No products available!");
            return;
        }
        
        for (Product product : products) {
            System.out.println(product);
        }
    }
    
    // CART AND ORDER OPERATIONS - Dynamic Methods
    
    // Add item to buyer's cart
    private void handleAddToCart() {
        handleListInventory();
        System.out.print("Enter product ID to add to cart: ");
        String productId = scanner.nextLine();
        
        Product product = inventoryService.getProduct(productId);
        if (product == null) {
            System.out.println("Product not found!");
            return;
        }
        
        if (product.getQuantity() <= 0) {
            System.out.println("Product out of stock!");
            return;
        }
        
        System.out.print("Enter quantity: ");
        int quantity = getIntInput();
        
        if (quantity > product.getQuantity()) {
            System.out.println("Insufficient stock! Available: " + product.getQuantity());
            return;
        }
        
        // Add to cart through current user
        CartItem cartItem = new CartItem(productId, product.getName(), product.getPrice(), quantity);
        currentUser.addToCart(cartItem);
        
        System.out.println("Item added to cart successfully!");
    }
    
    // View cart contents
    private void handleViewCart() {
        System.out.println("\n--- Your Cart ---");
        List<CartItem> cart = currentUser.getCart();
        
        if (cart.isEmpty()) {
            System.out.println("Cart is empty!");
            return;
        }
        
        double total = 0;
        for (CartItem item : cart) {
            System.out.println(item);
            total += item.getPrice() * item.getQuantity();
        }
        System.out.println("Total Amount: ₹" + total);
    }
    
    // Place order from cart
    private void handlePlaceOrder() {
        List<CartItem> cart = currentUser.getCart();
        if (cart.isEmpty()) {
            System.out.println("Cart is empty!");
            return;
        }
        
        // Validate inventory before placing order through order service
        if (!orderService.validateInventory(cart, inventoryService)) {
            System.out.println("Some items in cart are out of stock!");
            return;
        }
        
        // Calculate total amount
        double totalAmount = orderService.calculateTotal(cart);
        System.out.println("Total Amount: ₹" + totalAmount);
        
        // Process payment through payment service
        if (paymentService.processPayment(totalAmount, scanner)) {
            // Create order through order service
            Order order = orderService.createOrder(currentUser.getUsername(), cart, totalAmount);
            
            // Update inventory through inventory service
            inventoryService.updateInventoryAfterOrder(cart);
            
            // Clear cart
            currentUser.clearCart();
            
            System.out.println("Order placed successfully! Order ID: " + order.getOrderId());
        }
    }
    
    // View buyer's orders
    private void handleViewMyOrders() {
        System.out.println("\n--- My Orders ---");
        List<Order> userOrders = orderService.getOrdersByBuyer(currentUser.getUsername());
        
        if (userOrders.isEmpty()) {
            System.out.println("No orders found!");
            return;
        }
        
        for (Order order : userOrders) {
            System.out.println(order);
        }
    }
    
    // View seller's products
    private void handleViewMyProducts() {
        System.out.println("\n--- My Products ---");
        List<Product> sellerProducts = inventoryService.getProductsBySeller(currentUser.getUsername());
        
        if (sellerProducts.isEmpty()) {
            System.out.println("No products found!");
            return;
        }
        
        for (Product product : sellerProducts) {
            System.out.println(product);
        }
    }
    
    // View all orders (for sellers)
    private void handleViewAllOrders() {
        System.out.println("\n--- Orders for My Products ---");
        List<Order> sellerOrders = orderService.getOrdersForSeller(currentUser.getUsername(), inventoryService);
        
        if (sellerOrders.isEmpty()) {
            System.out.println("No orders found!");
            return;
        }
        
        for (Order order : sellerOrders) {
            System.out.println(order);
        }
    }
    
    // Logout current user
    private void handleLogout() {
        System.out.println("Logged out successfully!");
        currentUser = null;
    }
    
    // UTILITY METHODS
    
    // Password validation
    private boolean isValidPassword(String password) {
        return password != null && password.length() >= 6;
    }
    
    // Hash password using SHA-256
    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest(password.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-256 algorithm not available", e);
        }
    }
    
    // Safe integer input
    private int getIntInput() {
        try {
            int value = Integer.parseInt(scanner.nextLine());
            return value;
        } catch (NumberFormatException e) {
            System.out.println("Invalid input! Please enter a number.");
            return 0;
        }
    }
    
    // Safe double input
    private double getDoubleInput() {
        try {
            double value = Double.parseDouble(scanner.nextLine());
            return value;
        } catch (NumberFormatException e) {
            System.out.println("Invalid input! Please enter a valid number.");
            return 0.0;
        }
    }
}

// PROFILE SERVICE CLASS - Dynamic User Management
class ProfileService {
    private Map<String, User> users;
    
    public ProfileService() {
        this.users = new HashMap<>();
    }
    
    // Add new user to the system
    public void addUser(User user) {
        users.put(user.getUsername(), user);
    }
    
    // Check if user exists
    public boolean userExists(String username) {
        return users.containsKey(username);
    }
    
    // Authenticate user with credentials
    public User authenticateUser(String username, String passwordHash) {
        User user = users.get(username);
        if (user != null && user.getPasswordHash().equals(passwordHash)) {
            return user;
        }
        return null;
    }
    
    // Get user by username
    public User getUser(String username) {
        return users.get(username);
    }
    
    // Get all users
    public List<User> getAllUsers() {
        return new ArrayList<>(users.values());
    }
}

// INVENTORY SERVICE CLASS - Dynamic Product Management
class InventoryService {
    private Map<String, Product> products;
    
    public InventoryService() {
        this.products = new HashMap<>();
    }
    
    // Add new product
    public void addProduct(Product product) {
        products.put(product.getProductId(), product);
    }
    
    // Check if product exists
    public boolean productExists(String productId) {
        return products.containsKey(productId);
    }
    
    // Get product by ID
    public Product getProduct(String productId) {
        return products.get(productId);
    }
    
    // Update existing product
    public void updateProduct(String productId, String name, double price, int quantity) {
        Product product = products.get(productId);
        if (product != null) {
            if (name != null && !name.trim().isEmpty()) {
                product.setName(name);
            }
            if (price > 0) {
                product.setPrice(price);
            }
            if (quantity >= 0) {
                product.setQuantity(quantity);
            }
        }
    }
    
    // Get all available products (with stock > 0)
    public List<Product> getAllAvailableProducts() {
        List<Product> availableProducts = new ArrayList<>();
        for (Product product : products.values()) {
            if (product.getQuantity() > 0) {
                availableProducts.add(product);
            }
        }
        return availableProducts;
    }
    
    // Get products by specific seller
    public List<Product> getProductsBySeller(String sellerId) {
        List<Product> sellerProducts = new ArrayList<>();
        for (Product product : products.values()) {
            if (product.getSellerId().equals(sellerId)) {
                sellerProducts.add(product);
            }
        }
        return sellerProducts;
    }
    
    // Update inventory after order placement
    public void updateInventoryAfterOrder(List<CartItem> cartItems) {
        for (CartItem item : cartItems) {
            Product product = products.get(item.getProductId());
            if (product != null) {
                product.setQuantity(product.getQuantity() - item.getQuantity());
            }
        }
    }
}

// ORDER SERVICE CLASS - Dynamic Order Management
class OrderService {
    private Map<String, Order> orders;
    
    public OrderService() {
        this.orders = new HashMap<>();
    }
    
    // Create new order
    public Order createOrder(String buyerId, List<CartItem> items, double totalAmount) {
        String orderId = "ORD" + System.currentTimeMillis();
        Order order = new Order(orderId, buyerId, items, totalAmount);
        orders.put(orderId, order);
        return order;
    }
    
    // Validate inventory before order placement
    pub